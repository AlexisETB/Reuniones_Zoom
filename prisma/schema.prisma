generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                  Int                   @id @default(autoincrement())
  nombres             String
  apellidos           String
  cedula              String                @unique
  fecha_nacimiento    DateTime              @db.Date
  telefono            String?
  pais                String?
  ciudad              String?
  email               String                @unique
  discapacidad        Boolean               @default(false)
  password            String
  rol_id              Int
  citas               Cita[]
  postulacion_empleos postulacion_empleos[]
  profesionales       Profesional?
  roles               roles                 @relation(fields: [rol_id], references: [id])

  @@map("usuarios")
}

model Admin {
  id       Int    @id @default(autoincrement())
  usuario  String @unique
  password String
  rol_id   Int
  roles    roles  @relation(fields: [rol_id], references: [id])

  @@map("admins")
}

model Servicio {
  id            Int           @id @default(autoincrement())
  nombre        String
  descripcion   String?
  citas         Cita[]
  profesionales Profesional[]

  @@map("servicios")
}

model Profesional {
  usuario_id  Int       @id
  descripcion String?
  servicio_id Int
  citas       Cita[]
  servicio    Servicio  @relation(fields: [servicio_id], references: [id])
  usuarios    Usuario   @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  reuniones   Reunion[]

  @@map("profesionales")
}

model Reunion {
  id             Int         @id @default(autoincrement())
  uuid           String
  meeting_id     String
  topic          String
  start_time     DateTime    @db.Timestamp(6)
  duration       Int
  agenda         String?
  start_url      String
  join_url       String
  password       String
  profesional_id Int
  fecha          DateTime    @db.Timestamp(6)
  citas          Cita[]
  profesional    Profesional @relation(fields: [profesional_id], references: [usuario_id], onDelete: Cascade, map: "reuniones_profesional_id_fkey1")

  @@unique([profesional_id, fecha])
  @@map("reuniones")
}

model Cita {
  id             Int         @id @default(autoincrement())
  usuario_id     Int
  servicio_id    Int
  profesional_id Int
  reunion_id     Int?
  fecha          DateTime    @db.Date
  hora           DateTime    @db.Time(6)
  razon          String?
  estado_id      Int         @default(1)
  estados        estados     @relation(fields: [estado_id], references: [id])
  profesional    Profesional @relation(fields: [profesional_id], references: [usuario_id])
  reunion        Reunion?    @relation(fields: [reunion_id], references: [id])
  servicio       Servicio    @relation(fields: [servicio_id], references: [id])
  usuario        Usuario     @relation(fields: [usuario_id], references: [id], onDelete: Cascade)

  @@map("citas")
}

model roles {
  id       Int       @id @default(autoincrement())
  nombre   String    @unique
  admins   Admin[]
  usuarios Usuario[]
}

model estados {
  id                  Int                   @id @default(autoincrement())
  nombre              String                @unique
  citas               Cita[]
  postulacion_empleos postulacion_empleos[]
}

model modalidades {
  id                   Int                    @id @default(autoincrement())
  nombre               String                 @unique
  postulacion_empleos  postulacion_empleos[]
  trabajos_modalidades trabajos_modalidades[]
}

model paises {
  id                  Int                   @id @default(autoincrement())
  nombre              String
  tlf_code            String?
  postulacion_empleos postulacion_empleos[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model postulacion_empleos {
  id                Int          @id @default(autoincrement())
  usuario_id        Int
  trabajo_id        Int
  profesion         String
  area              String
  modalidad_id      Int?
  jornada           String       @default("tiempo completo")
  email             String
  ciudad            String?
  pais_id           Int?
  discapacidad      Boolean?     @default(false)
  fecha_postulacion DateTime?    @default(now()) @db.Timestamp(6)
  estado_id         Int          @default(1)
  estados           estados      @relation(fields: [estado_id], references: [id])
  modalidades       modalidades? @relation(fields: [modalidad_id], references: [id])
  paises            paises?      @relation(fields: [pais_id], references: [id])
  trabajos          trabajos     @relation(fields: [trabajo_id], references: [id], onDelete: Cascade)
  usuarios          Usuario      @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
}

model trabajos {
  id                   Int                    @id @default(autoincrement())
  empresa              String
  departamento         String?
  cargo                String
  horario              String?
  color                String?
  postulacion_empleos  postulacion_empleos[]
  trabajos_modalidades trabajos_modalidades[]
}

model trabajos_modalidades {
  trabajo_id   Int
  modalidad_id Int
  modalidades  modalidades @relation(fields: [modalidad_id], references: [id], onDelete: Cascade)
  trabajos     trabajos    @relation(fields: [trabajo_id], references: [id], onDelete: Cascade)

  @@id([trabajo_id, modalidad_id])
}
